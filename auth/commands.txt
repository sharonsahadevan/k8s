Switching context
=================
kubectl config use-context minikube
kubectl get all

 use a kubectl command that will allow us to check whether we could perform an action if we would be a specific user.
 
 kubectl auth can-i get pods --as jdoe
 
 
 List roles/clusterroles
 ========================
 
 kubectl get roles
 kubectl get clusterroles
 
 This time we got quite a few resources. Our cluster already has some Cluster Roles defined by default. Those prefixed with system: are Cluster Roles reserved for Kubernetes system use. Modifications to those roles can result in non-functional clusters, so we should not update them. Instead, we’ll skip system Roles and focus on those that should be assigned to users.

The output, limited to Cluster Roles that are meant to be bound to users, is as follows (you can get the same result through 
kubectl get clusterroles | grep -v system
 
 Looking into view
 ======================
 The Cluster Role with the least permissions is view. Let’s take a closer look at it.
 
 kubectl describe clusterrole view
 
 
 The main difference between edit and admin is that the latter allows us to manipulate Roles and RoleBindings. While edit permits us to do almost any operation related to Kubernetes objects like Pods and Deployments, admin goes a bit further and provides an additional capability that allows us to define permissions for other users by modifying existing or creating new Roles and Role Bindings.
 
 
 cluster admin
 ==============
The major restriction of the admin role is that it cannot alter the Namespace itself, nor it can update Resource Quotas (we haven’t explored them yet).
 
 kubectl describe clusterrole \
    cluster-admin
    
 
 Looking into Edit
 =====================
 Let’s explore another pre-defined Cluster Role
 
 kubectl describe clusterrole edit
 
 Looking into admin
 ===================
 
 kubectl describe clusterrole admin
 
The Cluster Role cluster-admin holds nothing back. An asterisk (*) means everything. It provides god-like powers. A user bound to this role can do anything, without any restrictions. The cluster-admin role is the one bound to the minikube user. We can confirm that easily by executing

kubectl auth can-i "*" "*"


 Describe Cluster Role Binding
 ==============================
 kubectl describe clusterrolebinding \
    view
 
 
 validate another user's permission
 ==================================
 kubectl auth can-i get pods \
    --as jdoe --all-namespaces
 
 kubectl --namespace dev auth can-i \
    create deployments --as jdoe

kubectl --namespace dev auth can-i \
    delete deployments --as jdoe
 
 
 
 
 
 
 
